% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_forecast.R
\name{predict_forecast}
\alias{predict_forecast}
\title{Use a time series model to infill and project data}
\usage{
predict_forecast(
  df,
  forecast_function,
  response,
  ...,
  ret = c("df", "all", "error", "model"),
  scale = NULL,
  probit = TRUE,
  test_col = NULL,
  test_period = NULL,
  test_period_flex = NULL,
  group_col = NULL,
  group_models = FALSE,
  sort_col = NULL,
  sort_descending = FALSE,
  pred_col = "pred",
  upper_col = "upper",
  lower_col = "lower",
  filter_na = c("all", "response", "predictors", "none"),
  type_col = NULL,
  types = c("imputed", "imputed", "projected"),
  source_col = NULL,
  source = NULL,
  replace_obs = c("missing", "all", "none")
)
}
\arguments{
\item{df}{Data frame of model data.}

\item{forecast_function}{An R function that outputs a forecast object coming from the
forecast package. You can directly pass \code{\link[forecast:forecast]{forecast::forecast()}} to the
function, or you can pass other wrappers to it such as \code{\link[forecast:ses]{forecast::holt()}} or
\code{\link[forecast:ses]{forecast::ses()}}.}

\item{response}{Column name of response variable to be used as the input to the
forecast function.}

\item{...}{Additional arguments passed to the forecast function.}

\item{ret}{Character vector specifying what values the function returns. Defaults
to returning a data frame, but can return a vector of model error, the
model itself or a list with all 3 as components.}

\item{scale}{Either \code{NULL} or a numeric value. If a numeric value is provided,
the response variable is scaled by the value passed to scale prior to model
fitting and prior to any probit transformation, so can be used to put the
response onto a 0 to 1 scale. Scaling is done by dividing the response by
the scale and using the \code{\link[=scale_transform]{scale_transform()}} function. The response, as well
as the fitted values and confidence bounds are unscaled prior to error
calculation and returning to the user.}

\item{probit}{Logical value on whether or not to probit transform the response
prior to model fitting. Probit transformation is performed after any scaling
determined by \code{scale} but prior to model fitting. The response, as well as
the fitted values and confidence bounds are untransformed prior to error
calculation and returning to the user.}

\item{test_col}{Name of logical column specifying which response values to remove
for testing the model's predictive accuracy. If \code{NULL}, ignored. See \code{\link[=model_error]{model_error()}}
for details on the methods and metrics returned.}

\item{test_period}{Length of period to test for RMChE. If \code{NULL}, beginning and end
points of each group in \code{group_col} are compared. Otherwise, \code{test_period} must
be set to an integer \code{n} and for each group, comparisons are made between
the end point and \code{n} periods prior.}

\item{test_period_flex}{Logical value indicating if \code{test_period} is less than
the full length of the series, should change error still be calculated for that
point. Defaults to \code{FALSE}.}

\item{group_col}{Column name(s) of group(s) to use in \code{\link[dplyr:group_by]{dplyr::group_by()}} when
supplying type, calculating mean absolute scaled error on data involving
time series, and if \code{group_models}, then fitting and predicting models too.}

\item{group_models}{Logical, if \code{TRUE}, fits and predicts models individually onto
each \code{group_col}. If \code{FALSE}, a general model is fit across the entire data
frame.}

\item{sort_col}{Column name of column to arrange data by in \code{dplyr::arrange()},
prior to filtering for latest contiguous time series and producing the
forecast.}

\item{sort_descending}{Logical value on whether the sorted values from \code{sort_col}
should be sorted in descending order. Defaults to \code{FALSE}.}

\item{pred_col}{Column name to store predicted value.}

\item{upper_col}{Column name to store upper bound of confidence interval.}

\item{lower_col}{Column name to store lower bound of confidence interval.}

\item{filter_na}{Character value specifying how, if at all, to filter \code{NA}
values from the dataset prior to applying the model.  By default, all
observations with missing values are removed, although it can also remove
rows only if they have missing dependent or independent variables, or no
filtering at all.}

\item{type_col}{Column name specifying data type.}

\item{types}{Vector of length 3 that provides the type to provide to data
produced in the model. These values are only used to fill in type values
where the dependent variable is missing. The first value is given to missing
observations that precede the first observation, the second to those after
the last observation, and the third for those following the final observation.}

\item{source_col}{Column name containing source information for the data frame.
If provided, the argument in \code{source} is used to fill in where predictions
have filled in missing data.}

\item{source}{Source to add to missing values.}

\item{replace_obs}{Character value specifying how, if at all, observations should
be replaced by fitted values. Defaults to replacing only missing values,
but can be used to replace all values or none.}
}
\value{
Depending on the value passed to \code{ret}, either a data frame with
predicted data, a vector of errors from \code{\link[=model_error]{model_error()}}, a fitted model, or a list with all 3.
}
\description{
\code{predict_forecast()} uses the forecast package's \code{\link[forecast:forecast]{forecast::forecast()}} methods
to generate predictions on time series data. These use the longest contiguous
observed values to forecast out a certain number periods. This function
automatically detects the latest observed values and the number of missing
values to forecast, and runs the provided forecasting function on the
observed data series.
}
